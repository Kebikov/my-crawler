import puppeteer from 'puppeteer';
import { Page } from 'puppeteer';
import chalk from 'chalk';


/** 
 * `–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –Ω–∞—á–∏–Ω–∞—é—à–∏—Ö—Å—è –Ω–∞ siteStartPage.` 
 * @example
 * return: {Promise<string[] | null>} –ú–∞—Å—Å–∏–≤ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
 */
async function getLinks(
    /** `–û–±—å–µ–∫—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã.` */
    page: Page, 
     /** `–¢–µ–∫—É—â—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è —Å–±–æ—Ä–∞ —Å—Å—ã–ª–æ–∫.` */
    sitePage: string, 
     /** `–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç.` */
    startPage: string
) {

    console.log(chalk.bgBlackBright('üîß ', 'is processed...', sitePage));

    await page.goto(sitePage, {waitUntil: 'networkidle2'});

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
    const links: string[] = await page.evaluate(() => {
        return Array.from(document.querySelectorAll('a'), (e) => e.href);
    });

    const linksSet = new Set(links);

    if(linksSet.size > 0) {
        const rightLinks = links.filter(link => link.startsWith(startPage));
        return rightLinks;
    } else {
        return null;
    }

}


export default getLinks;
